一、常用操作符
1、. :表示任何单个字符
2、[] :字符集，对单个字符给出取值范围
3、[^] :非字符集，对单个字符给出排除范围
4、* :前一个字符0次或无限次扩展
5、+ :前一个字符1次或无限次扩展
6、? :前一个字符0次或1次扩展
7、| :左右表达式中的任意一个
8、{m} :扩展前一个字符m次
9、{m,n} :扩展前一个字符m至n（包括n）次
10、^ :匹配字符串开头，如^abc表示abc且在一个字符串的开头
11、$ :匹配字符串结尾，如abc$表示abc且在一个字符串的结尾
12、() :分组标记，内部只能使用|操作符
13、\d :数字，等价于[0-9]
14、\w :单词字符，等价于[A-Za-z0-9_]

二、re库的基本使用
1、re库的主要功能函数
    re.search(pattern,string,flags=0)：在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象
        pattern：正则表达式的字符串表示——原生
        string：待匹配字符串
        flags=0：正则表达式使用时的控制标记
            常用控制标记：re.I re.IGNORECASE：忽略正则表达式的大小写
                       re.M re.MULTIILINE：正则表达式中的^操作符能够将给定字符串的每行当做匹配开始
                       re.S re.DOTALL：正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符
    re.match(pattern,string,flags=0)：从一个字符串的开始位置起匹配正则表达式，返回match对象
    re.findall(pattern,string,flags=0)：搜索字符串，以列表类型返回全部能够匹配的子串
    re.split(pattern,string,maxsplit=0,flags=0)：将一个字符串按照正则表达式匹配结果进行分割，返回列表类型
        maxsplit：最大分割数（指最多匹配maxsplit个正则表达式，如maxsplit=1时，输出结果有两个），剩余部分作为最后一个元素输出
    re.finditer(pattern,string,flags=0)：搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素都是match对象
    re.sub(pattern,replace_string,string,flags=0)：在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串
2、re库的另一种等价于用法（一个正则表达式模板被多次使用）：
    rst = re.search(pattern,string) <==> pat = re.compile(pattern)  rst = pat.search(string)
    re.compile(pattern,flags=0)：将正则表达式编译成正则表达式对象
3、match对象
    属性：
        .string：待匹配的文本
        .re：匹配时使用的pattern对象
        .pos：搜索文本开始的位置
        .endpos：搜索文本结束的位置
    方法：
        .group(0)：获得匹配后的字符串
            group(0)就相当于group函数，返回的是匹配的整体结果。
            当正则表达式中有括号分组时，group(1)表示第一个分组的匹配结果，group(2)表示第二个分组的匹配结果。当正则表达式中没有()时，是不能使用group(1)等的
            如：
                str = "123abc456"
                re = re.search(r'([0-9]*)([a-z]*)([0-9]*)',str)
                re.group(0): 123abc456
                re.group(1): 123
                re.group(2): abc
                re.group(3): 456
        .start()：匹配字符串在原始字符串中的开始位置
        .end()：匹配字符串在原始字符串中的结束位置
        .span()：返回(.start(),.end())
4、re库的贪婪匹配和最小匹配
    **** re库默认采用贪婪匹配，即输出最长的匹配字符串 ****
    最小匹配操作符：
    *?: 前一个字符0次或无限次扩展，最小匹配
    +?: 前一个字符1次或无限次扩展，最小匹配
    ??: 前一个字符0次或1次扩展，最小匹配
    {m,n}?: 扩展前一个字符m至n次（含n），最小匹配



