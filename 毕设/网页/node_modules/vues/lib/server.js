import micro       from 'micro'
import webpack     from 'webpack'
import url         from 'url'
import qs          from 'querystring'
import Compression from 'compression'

import Router                      from './router'
import vuesWebpack                 from './webpack'
import { createFiles, watchFiles } from './template'

const compression = Compression()

export default async config => {
  config.serverRouter   = new Router()

  await createFiles(config)

  const webpackConfig   = vuesWebpack(config)
  const webpackHotPath  = `${webpackConfig.output.publicPath}__webpack_hmr`
  const webpackCompiler = webpack(webpackConfig)

  let webpackHotMiddleware = false

  const webpackDevMiddleware = require('webpack-dev-middleware')(webpackCompiler, {
    noInfo: true,
    publicPath: webpackConfig.output.publicPath,
    path: webpackHotPath,
    quiet: true,
    lazy: config.nodeEnv === 'test'
  })

  // istanbul ignore next
  if (config.nodeEnv === 'development') {
    webpackHotMiddleware = require('webpack-hot-middleware')(webpackCompiler, {
      log: () => {}, path: webpackHotPath
    })
    watchFiles(config, webpackHotMiddleware) // watch template files for changes
  }

  const next = (req, res) => {
    if (config.server.gzip) {
      res.send = content => {
        compression(req, res, () => {
          micro.send(res, res.status, content)
        })
      }
    }

    webpackDevMiddleware(req, res, () => {
      // if the file doesn't exist in webpack, load index.html
      req.url = '/'
      // istanbul ignore next
      webpackDevMiddleware(req, res, () => {})
    })
  }

  const server = async (req, res) => {
    res.status = 200

    const method = req.method
    let { path } = url.parse(req.url)
    path = path.split('?')[0]

    let data = config.serverRouter.run(path)

    if (data) {
      if (typeof data === 'function') {
        data = data(config)
      }

      let { headers, status, response } = data

      response = data[method] || data[method.toLowerCase()] || response

      if (!response) {
        return next()
      }

      if (!headers || (headers && !headers.contentType)) {
        res.setHeader('Content-Type', 'application/json')
      }

      if (headers) {
        for (let [key, value] of Object.entries(headers)) {
          res.setHeader(key, value)
        }
      }

      try {
        req.data = await micro.json(req)
      } catch (e) {
        req.data = {}
      }

      req.path   = path
      req.query  = qs.parse(url.parse(req.url).query)
      req.params = data.params

      response = typeof response === 'function' ? response.apply(data, [req, res, next]) : response
      status   = status || res.status

      if (response) {
        return micro.send(res, status, response)
      }
    } else {
      /* istanbul ignore next */
      if (path.includes(webpackHotPath)) {
        return webpackHotMiddleware(req, res, next)
      } else {
        return next(req, res)
      }
    }

    return true
  }

  return micro(server)
}
